# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from category_encoders import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import make_pipeline
from glob import glob
import warnings

# Ignore warnings
warnings.simplefilter(action="ignore", category=FutureWarning)

# Wrangle function
def wrangle(filepath):
    df = pd.read_csv(filepath)
    mask_ba = df["place_with_parent_names"].str.contains("Distrito Federal")
    mask_apt = df["property_type"] == "apartment"
    mask_price = df["price_aprox_usd"] < 100_000
    df = df[mask_ba & mask_apt & mask_price]
    low, high = df["surface_covered_in_m2"].quantile([0.1, 0.9])
    mask_area = df["surface_covered_in_m2"].between(low, high)
    df = df[mask_area]
    df[["lat", "lon"]] = df["lat-lon"].str.split(",", expand=True).astype(float)
    df.drop(columns="lat-lon", inplace=True)
    df["borough"] = df["place_with_parent_names"].str.split("|", expand=True)[1]
    df.drop(columns="place_with_parent_names", inplace=True)
    df.drop(columns=["surface_total_in_m2", "price_usd_per_m2", "floor", "rooms", "expenses"], inplace=True)
    df.drop(columns=["operation", "property_type", "currency", "properati_url"], inplace=True)
    df.drop(columns=["price", "price_aprox_local_currency", "price_per_m2"], inplace=True)
    return df

# Combine data
files = glob("data/mexico-city-real-estate-*.csv")
frames = [wrangle(file) for file in files]
df = pd.concat(frames, ignore_index=True)
print(df.info())

# Visualization
plt.hist(df["price_aprox_usd"])
plt.xlabel("Price [$]")
plt.ylabel("Count")
plt.title("Distribution of Apartment Prices")
plt.savefig("images/2-5-4.png", dpi=150)
plt.show()

plt.scatter(x=df["surface_covered_in_m2"], y=df["price_aprox_usd"])
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")
plt.title("Mexico City: Price vs. Area")
plt.savefig("images/2-5-5.png", dpi=150)
plt.show()

# Feature matrix and target vector
target = "price_aprox_usd"
X_train = df.drop(columns=target)
y_train = df[target]

# Baseline model
y_mean = y_train.mean()
y_pred_baseline = [y_mean] * len(y_train)
baseline_mae = mean_absolute_error(y_train, y_pred_baseline)
print("Mean apt price:", y_mean)
print("Baseline MAE:", baseline_mae)

# Build and fit model
model = make_pipeline(
    OneHotEncoder(use_cat_names=True),
    SimpleImputer(),
    Ridge()
)
model.fit(X_train, y_train)

# Model predictions
X_test = pd.read_csv("data/mexico-city-test-features.csv")
y_test_pred = pd.Series(model.predict(X_test))
print(y_test_pred.head())

# Feature importance
coefficients = model.named_steps["ridge"].coef_.round(2)
features = model.named_steps["onehotencoder"].get_feature_names()
feat_imp = pd.Series(coefficients, index=features)

# Visualization of feature importances
feat_imp.sort_values(key=abs).tail(10).plot(kind="barh")
plt.xlabel("Importance [USD]")
plt.ylabel("Feature")
plt.title("Feature Importances for Apartment Price")
plt.savefig("images/2-5-13.png", dpi=150)
plt.show()
